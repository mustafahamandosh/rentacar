import { compareSync } from 'bcryptjs';
import { sign } from 'jsonwebtoken';
import { inject, injectable } from 'tsyringe';

import { IUserRepository } from '../../../repository/IUserRepository';

interface IRequest {
    email: string;
    password: string;
}

interface IResponse {
    user: {
        name: string;
        email: string;
    };
    token: string;
}

@injectable()
export class AuthenticateUserCase {
    constructor(
        @inject('UserRepository') private userRepository: IUserRepository,
    ) {}

    async execute({ email, password }: IRequest): Promise<IResponse> {
        const user = await this.userRepository.findByEmail(email);

        if (!user) {
            throw new Error('Email or password are incorrect');
        }

        const checkPassword = compareSync(password, user.password);

        if (!checkPassword) {
            throw new Error('Email or password are incorrect');
        }

        // secret key is generated by md5
        const token = sign({}, 'b59f502691a0c687ade62a3d49de4917', {
            subject: user.id,
            expiresIn: '1d',
        });

        return {
            user: {
                name: user.name,
                email: user.email,
            },
            token,
        };
    }
}
